name: Daily reminder push

on:
  schedule:
    - cron: "0 12 * * *"   # 台北 20:00（UTC+8）
    - cron: "0 14 * * *"   # 台北 22:00（UTC+8）
  workflow_dispatch: {}

jobs:
  push:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 登入 Google
      - name: Auth to Google
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      # 2️⃣ 安裝 gcloud
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      # 3️⃣ 安裝 jq（用來處理 JSON）
      - name: Install jq
        run: sudo apt-get install -y jq

      # 4️⃣ 取得 Access Token
      - name: Get access token
        run: |
          ACCESS_TOKEN=$(gcloud auth application-default print-access-token)
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV

      # 5️⃣ 從 Firestore 讀取 pendingCount
- name: Read pendingCount from Firestore
  id: firestore
  run: |
    echo "📥 Fetching Firestore document..."
    curl -sS -X GET \
      -H "Authorization: Bearer $ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      "https://firestore.googleapis.com/v1/projects/${{ secrets.FIREBASE_PROJECT_ID }}/databases/(default)/documents/daily/${{ secrets.FIREBASE_UID }}" \
      -o firestore.json

    echo "Firestore response (truncated):"
    jq 'del(.fields | .. | objects | .[]? |= (type=="string" and (.|length>200)? then .[0:200]+"..." else . end))' firestore.json | head -n 80

    # 依序嘗試：
    # 1) 根層 pendingCount
    # 2) meta.pendingCount
    # 都沒有 => 0
    pendingCount=$(jq -r '
      if (.fields.pendingCount.integerValue? // empty) then
        .fields.pendingCount.integerValue
      elif (.fields.meta.mapValue.fields.pendingCount.integerValue? // empty) then
        .fields.meta.mapValue.fields.pendingCount.integerValue
      else
        "0"
      end
    ' firestore.json)

    echo "pendingCount=${pendingCount}" | tee -a $GITHUB_ENV

      # 6️⃣ 檢查是否需要發通知
      - name: Skip push (nothing pending)
        if: env.pendingCount == '0'
        run: echo "✅ 所有任務都完成，跳過推播。"

      # 7️⃣ 建立推播 payload
      - name: Build FCM payload
        if: env.pendingCount != '0'
        run: |
          cat > payload.json <<'JSON'
          {
            "message": {
              "token": "${{ secrets.FCM_TOKEN }}",
              "notification": {
                "title": "每日任務提醒",
                "body": "你還有未完成的每日任務喔！"
              },
              "webpush": {
                "headers": {
                  "Urgency": "high",
                  "TTL": "300"
                },
                "fcm_options": {
                  "link": "https://eyvind95.github.io/hello/apps/ledger/daily.html"
                },
                "notification": {
                  "icon": "https://eyvind95.github.io/hello/apps/ledger/6.png",
                  "badge": "https://eyvind95.github.io/hello/apps/ledger/8.png",
                  "tag": "daily-reminder"
                }
              }
            }
          }
          JSON
          echo "Payload built:"
          cat payload.json

      # 8️⃣ 傳送推播
      - name: Send FCM HTTP v1
        if: env.pendingCount != '0'
        run: |
          set -euo pipefail
          HTTP_STATUS=$(curl -sS -o response.json -w "%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json; charset=UTF-8" \
            "https://fcm.googleapis.com/v1/projects/${{ secrets.FIREBASE_PROJECT_ID }}/messages:send" \
            -d @payload.json)

          echo "HTTP_STATUS=${HTTP_STATUS}"
          echo "RESPONSE:"
          cat response.json

          if [ "$HTTP_STATUS" != "200" ]; then
            echo "❌ FCM send failed."
            exit 1
          fi

      # 9️⃣ 完成
      - name: Done
        run: echo "🎉 Workflow finished."
