name: Daily reminder push

on:
  schedule:
    - cron: "0 12 * * *"   # 台灣時間 20:00
    - cron: "0 14 * * *"   # 台灣時間 22:00
  workflow_dispatch: {}

jobs:
  push:
    runs-on: ubuntu-latest

    steps:
      - name: Auth to Google
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # 讀判斷依據（pendingCount / dayToken）
      - name: Read pendingCount & dayToken from Firestore (REST)
        id: read_pending
        env:
          PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          UID: ${{ secrets.FIREBASE_UID }}
        run: |
          set -euo pipefail
          ACCESS_TOKEN="$(gcloud auth application-default print-access-token)"
          DOC_URL="https://firestore.googleapis.com/v1/projects/${PROJECT_ID}/databases/(default)/documents/daily/${UID}"

          HTTP_STATUS=$(curl -sS -o doc.json -w "%{http_code}" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json; charset=UTF-8" \
            "$DOC_URL")
          echo "HTTP_STATUS=${HTTP_STATUS}"
          head -n 80 doc.json || true

          if [ "$HTTP_STATUS" != "200" ] || [ ! -s doc.json ]; then
            echo "pending=" >> "$GITHUB_OUTPUT"
            echo "dayToken=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 防呆：非 JSON 先補 {}
          if ! head -c1 doc.json | grep -q '{'; then echo '{}' > doc.json; fi

          PENDING=$(jq -r 'try .fields.meta.mapValue.fields.pendingCount.integerValue // empty' doc.json)
          DAYTOKEN=$(jq -r 'try .fields.meta.mapValue.fields.dayToken.stringValue   // empty' doc.json)

          echo "pending=${PENDING}"   >> "$GITHUB_OUTPUT"
          echo "dayToken=${DAYTOKEN}" >> "$GITHUB_OUTPUT"

      - name: Decide to push?
        id: decide
        run: |
          set -euo pipefail
          PENDING="${{ steps.read_pending.outputs.pending }}"
          DT="${{ steps.read_pending.outputs.dayToken }}"
          TODAY="$(TZ=Asia/Taipei date +%Y-%m-%d)"
          TS="$(TZ=Asia/Taipei date +%Y%m%d-%H%M)"
          echo "ts=${TS}" >> "$GITHUB_OUTPUT"
          echo "Today=${TODAY}, pending='${PENDING}', dayToken='${DT}'"

          if [ -z "${DT}" ] || [ -z "${PENDING}" ]; then echo "do_send=false" >> "$GITHUB_OUTPUT"; exit 0; fi
          if ! [[ "$PENDING" =~ ^[0-9]+$ ]]; then PENDING=0; fi
          if [ "$DT" != "$TODAY" ]; then echo "do_send=false" >> "$GITHUB_OUTPUT"; exit 0; fi
          if [ "$PENDING" -le 0 ]; then echo "do_send=false" >> "$GITHUB_OUTPUT"; exit 0; fi
          echo "do_send=true" >> "$GITHUB_OUTPUT"

      # 讀取 /daily/<uid>/tokens 子集合
      - name: List device tokens
        if: steps.decide.outputs.do_send == 'true'
        id: list_tokens
        env:
          PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          UID: ${{ secrets.FIREBASE_UID }}
        run: |
          set -euo pipefail
          ACCESS_TOKEN="$(gcloud auth application-default print-access-token)"
          BASE="https://firestore.googleapis.com/v1/projects/${PROJECT_ID}/databases/(default)/documents"
          PARENT="${BASE}/daily/${UID}/tokens"
          PAGE_TOKEN=""
          : > tokens.txt

          while :; do
            URL="${PARENT}"
            if [ -n "$PAGE_TOKEN" ]; then URL="${URL}?pageToken=${PAGE_TOKEN}"; fi

            HTTP_STATUS=$(curl -sS -o tokens.json -w "%{http_code}" \
              -H "Authorization: Bearer ${ACCESS_TOKEN}" \
              -H "Content-Type: application/json; charset=UTF-8" \
              "$URL")
            echo "LIST TOKENS http=${HTTP_STATUS}"

            if [ "$HTTP_STATUS" != "200" ] || [ ! -s tokens.json ]; then
              echo "No tokens or list failed."
              break
            fi
            if ! head -c1 tokens.json | grep -q '{'; then echo '{}' > tokens.json; fi

            jq -r 'try .documents[]?.name | capture("(?<id>[^/]+)$").id // empty' tokens.json >> tokens.txt
            PAGE_TOKEN=$(jq -r 'try .nextPageToken // empty' tokens.json)
            [ -z "$PAGE_TOKEN" ] && break
          done

          echo "---- tokens ----"
          cat tokens.txt || true

      # 逐顆發送（data-only），UNREGISTERED 就刪 doc（tokenId 需 URL encode）
      - name: Send FCM to each token
        if: steps.decide.outputs.do_send == 'true'
        env:
          PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          UID: ${{ secrets.FIREBASE_UID }}
        run: |
          set -euo pipefail
          ACCESS_TOKEN="$(gcloud auth application-default print-access-token)"
          TS="${{ steps.decide.outputs.ts }}"
          BASE="https://firestore.googleapis.com/v1/projects/${PROJECT_ID}/databases/(default)/documents"

          while IFS= read -r TOK; do
            [ -z "$TOK" ] && continue

            printf '%s' "$TOK" > tok.txt

            cat > payload.json <<'JSON'
            {
              "message": {
                "token": "__TOKEN__",
                "webpush": {
                  "headers": { "Urgency": "high", "TTL": "1800" },
                  "fcm_options": { "link": "https://eyvind95.github.io/hello/apps/ledger/daily.html" }
                },
                "data": {
                  "title": "每日任務提醒",
                  "body":  "你還有未完成的每日任務喔！",
                  "ts":    "__TS__"
                }
              }
            }
            JSON

            # 替換 token 與 ts
            sed -i "s/__TOKEN__/$(printf '%s' "$TOK" | sed 's/[&/\]/\\&/g')/" payload.json
            sed -i "s/__TS__/${TS}/" payload.json

            HTTP_STATUS=$(curl -sS -o response.json -w "%{http_code}" \
              -H "Authorization: Bearer ${ACCESS_TOKEN}" \
              -H "Content-Type: application/json; charset=UTF-8" \
              "https://fcm.googleapis.com/v1/projects/${PROJECT_ID}/messages:send" \
              -d @payload.json)

            echo "[${TOK}] HTTP_STATUS=${HTTP_STATUS}"
            if [ ! -s response.json ] || ! head -c1 response.json | grep -q '{'; then echo '{}' > response.json; fi
            jq -r 'try .name // .error.message // empty' response.json || true

            # UNREGISTERED → 刪 /daily/<uid>/tokens/<tokenId>（URL encode 用 jq @uri）
            if jq -e 'try .error.details[]? | select(.errorCode=="UNREGISTERED") | true catch false' response.json >/dev/null 2>&1; then
              ENCODED="$(printf '%s' "$TOK" | jq -sRr @uri)"
              curl -sS -X DELETE -o /dev/null -w "%{http_code}" \
                -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                -H "Content-Type: application/json; charset=UTF-8" \
                "${BASE}/daily/${UID}/tokens/${ENCODED}" || true
            fi
          done < tokens.txt

      - name: Skip push (no need)
        if: steps.decide.outputs.do_send != 'true'
        run: echo "Skip push：非今日或 pending==0 或缺資料"
